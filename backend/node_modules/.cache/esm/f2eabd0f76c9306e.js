let fs,path,ApolloServer,resolvers,getUser;_76c‍.x([["default",()=>_76c‍.o]]);_76c‍.w("fs",[["default",["fs"],function(v){fs=v}]]);_76c‍.w("path",[["default",["path"],function(v){path=v}]]);_76c‍.w("apollo-server-express",[["ApolloServer",["ApolloServer"],function(v){ApolloServer=v}]]);_76c‍.w("./resolvers",[["default",["resolvers"],function(v){resolvers=v}]]);_76c‍.w("./utils/getUser",[["default",["getUser"],function(v){getUser=v}]]);


// import typeDefs  from "./schema/typeDefs"



const typeDefs = fs
.readFileSync(path.join(__dirname, "./schema", "schema.graphql"),"utf8")
.toString()
  
const server = new ApolloServer({
    typeDefs,
    resolvers,
    context: ({req}) => {
      //check token from header 
      const token = req.headers.authorization || ''

      //extrack userId from token 
      const userId = getUser(token)

      
      return { userId }
    }
  })

_76c‍.d(server);  